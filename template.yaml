# https://github.com/awslabs/serverless-application-model/blob/develop/versions/2016-10-31.md
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: hellword-api

Globals:
  Function:
    Timeout: 60
Parameters:
  StageName:
    Type: String
    Default: Prod
  FirebaseProjectName:
    Type: String

Resources:
  CustomerTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: Customers
      PrimaryKey:
        Name: email
        Type: String
  ApiHttpGatewayApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      DefaultRouteSettings:
        ThrottlingBurstLimit: 200
        ThrottlingRateLimit: 500
      Auth:
        Authorizers:
          FirebaseAuthorizer:
            IdentitySource: $request.header.Authorization # This should be the default option
            JwtConfiguration:
              audience:
                - !Ref FirebaseProjectName
              issuer: !Sub https://securetoken.google.com/${FirebaseProjectName}
        DefaultAuthorizer: FirebaseAuthorizer
      StageName: !Ref StageName
  CustomerListFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.default
      CodeUri: functions/customerlist/dist
      Runtime: nodejs12.x
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref CustomerTable
      Events:
        Customers:
          Type: HttpApi
          Properties:
            # Description: Return the list of all customers
            ApiId: !Ref ApiHttpGatewayApi
            Path: /customers
            Method: GET
      Environment:
        Variables:
          TABLE_NAME: !Ref CustomerTable

  CustomerAddFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.default
      CodeUri: functions/customeradd/dist
      Runtime: nodejs12.x
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref CustomerTable
      Events:
        Customers:
          Type: HttpApi
          Properties:
            # Description: Add/update customer data
            ApiId: !Ref ApiHttpGatewayApi
            Path: /customer
            Method: PUT
      Environment:
        Variables:
          TABLE_NAME: !Ref CustomerTable

  CustomerQueryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.default
      CodeUri: functions/customerquery/dist
      Runtime: nodejs12.x
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref CustomerTable
      Events:
        Customers:
          Type: HttpApi
          Properties:
            # Description: Get a single user data
            ApiId: !Ref ApiHttpGatewayApi
            Path: /customer
            Method: GET
      Environment:
        Variables:
          TABLE_NAME: !Ref CustomerTable

  WebsiteHosting:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: WebsitePolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref WebsiteHosting
                - /*
      Bucket: !Ref WebsiteHosting
Outputs:
  WebsiteURL:
    Value: !GetAtt
      - WebsiteHosting
      - WebsiteURL
    Description: URL for website hosted on S3
  WebsiteHostingSecureURL:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WebsiteHosting
          - DomainName
    Description: Name of S3 bucket to hold website content
  LambdaRestApi:
    Description: URL for application
    Value: !Sub 'https://${ApiHttpGatewayApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${StageName}/'
    Export:
      Name: LambdaRestApi
  HttpApiId:
    Description: Api id of HttpApi
    Value:
      Ref: ApiHttpGatewayApi
